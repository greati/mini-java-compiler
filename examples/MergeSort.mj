program MergeSortProgram;
class MergeSort
{
	method void merge(int[] v; int begin; int middle; int end)
		declarations
            int i = begin, j = middle+1, k = begin, length = end-begin+1;
            int[] aux;
		enddeclarations
	{
        while (i <= middle) && (j <= end)
        {
            if v[i] < v[j] {
                aux[k] := v[i];
                i := i + 1
            }
            else
            {
                aux[k] := v[j];
                j := j + 1
            };
            k := k + 1
        };

        while i <= middle
        {
            aux[k] := v[i];
            i := i + 1;
            k := k + 1
        };

        while j <= end
        {
            aux[k] := v[j];
            j := j + 1;
            k := k + 1
        };

        for k := begin to end step 1
        {
            aux[k] := v[k]
        }
	}
    method void mergeSort(int[] v; int begin; int end)
		declarations
            int middle;
		enddeclarations
    {
        if begin < end
        {
            middle := (end + begin)/2;
            mergeSort(v, begin, middle);
            mergeSort(v, middle, end);
            merge(v, begin, middle, end)
        }
	}
}