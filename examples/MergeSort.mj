program MergeSortProgram;

class MergeSort
{
	method void merge(int[] v; int begin; int middle; int end)
		declarations
            int i = begin, j = middle+1, k = begin, length = end-begin+1;
            int[] aux;
		enddeclarations
	{
        while(i <= middle && j <= end)
        {
            if(v[i] < v[j]){
                aux[k] := v[i];
                i := i + 1
            }
            else
            {
                aux[k] := v[j];
                j := j + 1
            };
            k := k + 1
        };

        while(i <= middle)
        {
            aux[k] := v[i];
            i := i + 1;
            k := k + 1
        };

        while(j <= end)
        {
            aux[k] := v[j];
            j := j + 1;
            k := k + 1
        };

        for(k = begin; k <= end; k++)
        {
            aux[k] := v[k]
        }
	}
    method void mergeSort(int[] v; int begin; int end)
		declarations
            int meio;
		enddeclarations
    {
        if(begin < end)
        {
            meio := (fim + comeco)/2;
            mergeSort(v, comeco, meio);
            mergeSort(v, meio, fim);
            merge(v, comeco, meio, fim)
        }
	{
}
