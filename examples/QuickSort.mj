program QuickSortProgram;

class Main
{
	method void quickSort(int[] v; val int begin; val int end)
		declarations
            int i = begin, j = end-1, pivot = v[(begin + end)/2], aux;
		enddeclarations
	{
        while i <= j
        {
            while (v[i] < pivot) && (i < end)
            {
                i := i + 1
            };
            while (v[j] > pivot) && (j > begin)
            {
                j := j - 1
            };
            if i <= j
            {
                aux := v[i];
                v[i] := v[j];
                v[j] := aux;
                i := i + 1;
                j := j - 1
            }
        };
        if j > begin
        {
            quickSort(v, begin, j + 1)
        };
        if i < end
        {
            quickSort(v, i, end)
        }
    }

    method void perform() 
        declarations
            int[] v = @int[10];
            int begin = 0, end = 9, i;
        enddeclarations
    {
       print "Initial: \n";
       for i := end to begin step (-1) {
            v[i] := i;
            print v[i];
            print "\n"
       };
       quickSort(v, begin, end);
       print "Sorted: \n";
       for i := begin to end { 
           print v[i];
           print "\n"
       }
    }

    method void main() {
        perform() 
    }
}
