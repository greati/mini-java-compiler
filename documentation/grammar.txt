# Grammar

<PROGRAM> := "PROGRAM" <ID> ; <CLASSDECL>+
<CLASSDECL> := "CLASS" <ID> <CLASSBODY>
<CLASSBODY> := "{" <DECLS># <METHODDECL>* "}"
<DECLS> := "DECLARATIONS" <FIELDDECL>* "ENDDECLARATIONS"
<FIELDDECL> := <TYPE> <FIELD_DECL_AUX> ";"
<FIELD_DECL_AUX1> := <VARIABLE_DECL_ID> "=" <VARIABLE_INITIALIZER> ["," <FIELD_DECL_AUX1>]# | <VARIABLE_DECL_ID> ["," <FIELD_DECL_AUX1>]#
<VARIABLE_DECL_ID> := <ID> ["[" "]"]*
<VARIABLE_INITIALIZER> := <EXPRESSION> | <ARRAY_INITIALIZER> | <ARRAY_CREATION_EXPRESSION>
<ARRAY_INITIALIZER> := "{" <VARIABLE_INITIALIZER> ["," <VARIABLE_INITIALIZER>]* "}"
<ARRAY_CREATION_EXPRESSION> := "INT" [ "[" <EXPRESSION> "]" ]+
<METHOD_DECL> := "METHOD" <METHOD_DECL_AUX1> <ID> "(" <FORMAL_PARAMETER_LIST># ")" <BLOCK>
<METHOD_DECL_AUX1> := "VOID" | <TYPE><FORMAL_PARAMETER_LIST> := "VAL"# "INT" <ID> ["," <ID>]* [";" <FORMAL_PARAMETER_LIST>]#
<FORMAL_PARAMETER_LIST> := "VAL"# <TYPE> <ID> ["," <ID>]* [";" <FORMAL_PARAMETER_LIST>]#
<TYPE> := <TYPE_AUX1> [ [ "[" "]" ]+ ["." <TYPE>]# ]#
<TYPE_AUX1> := <ID> | "INT" | "STRING"
<STATEMENT_LIST> := "{" <STATEMENT> [";" <STATEMENT>]* "}"
<STATEMENT> := <ASSIGNMENT_STATEMENT> | <METHOD_CALL_STATEMENT> | <RETURN_STATEMENT> | <IF_STATEMENT> | <WHILE_STATEMENT>
			| <FOR_STATEMENT> | <SWITCH_STATEMENT> 
<ASSIGNMENT_STATEMENT> := <VARIABLE> ":=" <EXPRESSION>
<METHOD_CALL_STATEMENT> := <VARIABLE> "(" [ <EXPRESSION> ["," <EXPRESSION>]* ]# ")"
<RETURN_STATEMENT> := "RETURN" [<EXPRESSION>]#
<IF_STATEMENT> := "IF" <EXPRESSION> <STATEMENT_LIST> [ "ELSE" <IF_STATEMENT_AUX1> ]#
<IF_STATEMENT_AUX1> := <IF_STATEMENT> | <STATEMENT_LIST>
<WHILE_STATEMENT> := "WHILE" <EXPRESSION> <STATEMENT_LIST>
<EXPRESSION> := <SIMPLE_EXPRESSION> [<EXPRESSION_AUX1> <SIMPLE_EXPRESSION>]#
<EXPRESSION_AUX1> := "<" | "<=" | "==" | "!=" | ">=" | ">"
<SIMPLE_EXPRESSION> := [<SIMPLE_EXPRESSION_AUX1]# <TERM> [<SIMPLE_EXPRESSION_AUX2> <TERM>]*
<SIMPLE_EXPRESSION_AUX1> := "+" | "-"
<SIMPLE_EXPRESSION_AUX2> := "+" | "-" | "||"
<TERM> := <FACTOR> [ <TERM_AUX1> <FACTOR> ]*
<TERM_AUX1> := * | / | &&
<FACTOR> := <UNSIGNED_CONSTANT> | <VARIABLE> | <METHOD_CALL_STATEMENT> | "(" <EXPRESSION> ")" | "NOT" <FACTOR> 
<UNSIGNED_CONSTANT> := <INTEGER_CONSTANT> | <STRING_CONSTANT>
<VARIABLE> := <ID> [ <VARIABLE_AUX1> ]*
<VARIABLE_AUX1> := "[" <EXPRESSION> ["," <EXPRESSION>]* "]" | "." <ID>

* : zero or more
+ : one or more
# : optional (zero or one)

# Tokens
PROGRAM
IDENTIFIER
;
CLASS
{
}
DECLARATIONS 
ENDDECLARATIONS
,
=
[
]
INT
STRING
METHOD
VOID
(
)
VAL
.
:=
RETURN
IF
ELSE
WHILE
<
<=
==
!=
>=
>
FOR*
SWITCH*
CASE*
+
-
||
*
/
&&
NOT
INTEGERCONSTANT
STRINGCONSTANT


* : created by the group
