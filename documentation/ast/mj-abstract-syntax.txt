Id (pos : Pos, id : string) <- Node;
ConstructList (pos : Pos, constructs : deque<Node*>) <- Node;
Expr (pos : Pos) <- Node;
AlExpr (pos : Pos) <- Expr;
ExprParen (pos : Pos, expr : Expr*) <- AlExpr;
RelExpr (pos : Pos, op : RelOp, lhs : AlExpr*, rhs : AlExpr*) <- Expr;
AlBinExpr (pos : Pos, op : AlBinOp, lhs : AlExpr*, rhs : AlExpr*) <- AlExpr;
AlUnExpr (pos : Pos, op : AlUnOp, alexpr : AlExpr*) <- AlExpr;
LitExpr<T> (pos : Pos, val : T) <- AlExpr;
AccessOperation (pos : Pos) <- Node;
BracketAccess (pos : Pos, expressionList : ConstructList*, accessOperation : AccessOperation*) <- AccessOperation;
DotAccess (pos : Pos, id : Id*, accessOperation : ConstructList*) <- AccessOperation;
Var (pos : Pos, id : Id*, accessOperation : AccessOperation*) <- AlExpr;
FunctionCallExpr (pos : Pos, var : Var*, actualParams : ConstructList*) <- AlExpr;
Stmt (pos : Pos) <- Node;
AssignStmt (pos : Pos, var : Var*, expr : Expr*) <- Stmt;
FunctionCallStmt (pos : Pos, var : Var*, actualParams : ConstructList*) <- Stmt;
ReadStmt (pos : Pos, id : Id*) <- Stmt;
PrintStmt (pos : Pos, expr : Expr*) <- Stmt;
Case (pos : Pos, expr : Expr*, stmts : ConstructList*) <- Node;
SwitchStmt (pos : Pos, caseList : ConstructList*, defaultStmts : ConstructList*) <- Stmt;
WhileStmt (pos : Pos, expr : Expr*, stmts : ConstructList*) <- Stmt;
ForStmt (pos : Pos, id : Id*, assignExpr : Expr*, toExpr : Expr*, 
         stepExpr : Expr*, stmts : ConstructList*) <- Stmt;
ElsePart (pos : Pos) <- Node;
Else (pos : Pos, stmts : ConstructList*) <- ElsePart;
IfStmt (pos : Pos, expr : Expr*, stmts : ConstructList*, elsePart : ElsePart*) <- Stmt;
ElseIf (pos : Pos, ifStmt : IfStmt*) <- ElsePart;
ReturnStmt (pos : Pos, expr : Expr*) <- Stmt;
Type (pos : Pos, numBrackets : int, typeName : string) <- Node;
VarDeclId (pos : Pos, id : Id*, numBrackets : int) <- Node;
VarInit (pos : Pos) : Node;
FieldDeclVar (pos : Pos, varDeclId : VarDeclId*, varInit : VarInit*) <- Node;
FieldDecl (pos : Pos, type : Type*, varsDecls : ConstructList*) <- Node;
Decls (pos : Pos, fields : ConstructList*) <- Node;
FormalParams (pos : Pos, val : bool, type : Type*, ids : ConstructList*) <- Node;
Block (pos : Pos, decls : Decls*, stmts : ConstructList*) <- Node;
MethodReturnType (pos : Pos, type : Type*) <- Node;
MethodDecl (pos : Pos, returnType : MethodReturnType*, id : Id*, 
        params : ConstructList*, block : Block*) <- Node;
ClassBody (pos : Pos, decls : Decls*, methods : ConstructList*) <- Node;
ClassDecl (pos : Pos, id : Id*, body : ClassBody*) <- Node;
Program (pos : Pos, id : Id*, classes : ConstructList*) <- Node;
ExprVarInit (pos : Pos, expr : Expr*) <- VarInit;
ArrayCreationVarInit (pos : Pos, arrayInit : ConstructList*) <- VarInit;
ArrayCreation (pos : Pos, type : Type*, dims : ConstructList*) <- VarInit;
ArrayCreationVarInit (pos : Pos, arrayInit : ArrayCreation*) <- VarInit;
